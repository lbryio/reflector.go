os: linux
dist: trusty
language: go

# Only the last two Go releases are supported by the Go team with security
# updates. Any versions older than that should be considered deprecated.
# Don't bother testing with them. tip builds your code with the latest
# development version of Go. This can warn you that your code will break
# in the next version of Go. Don't worry! Later we declare that test runs
# are allowed to fail on Go tip.
go:
  - 1.10.2
  - master

# Skip the install step. Don't `go get` dependencies. Only build with the
# code in vendor/
install: true

matrix:
  # It's ok if our code fails on unstable development versions of Go.
  allow_failures:
    - go: master
  # Don't wait for tip tests to finish. Mark the test run green if the
  # tests pass on the stable versions of Go.
  fast_finish: true

# Don't email me the results of the test runs.
notifications:
  email: false

# Anything in before_script that returns a nonzero exit code will
# flunk the build and immediately stop. It's sorta like having
# set -e enabled in bash.
before_script:
# All the .go files, excluding vendor/ and model (auto generated)
  - GO_FILES=$(find . -iname '*.go' ! -iname '*_test.go' -type f | grep -v /vendor/ )
  - go get golang.org/x/tools/cmd/goimports                     # Used in build script for generated files
  - go get github.com/golang/lint/golint                        # Linter
  - go get honnef.co/go/tools/cmd/megacheck                     # Badass static analyzer/linter
  - go get github.com/jgautheron/gocyclo                        # Check against high complexity
  - go get github.com/mdempsky/unconvert                        # Identifies unnecessary type conversions
  - go get github.com/kisielk/errcheck                          # Checks for unhandled errors
  - go get github.com/opennota/check/cmd/varcheck               # Checks for unused vars
  - go get github.com/opennota/check/cmd/structcheck            # Checks for unused fields in structs



# script always run to completion (set +e). All of these code checks are must haves
# in a modern Go project.
script:
  # Build Prism successfully
  - make
  # Fail if a .go file hasn't been formatted with gofmt
  - test -z $(gofmt -s -l $GO_FILES)
  # Run unit tests
  - go test ./...
  # Checks for unused vars and fields on structs
  - varcheck ./...
  - structcheck ./...
  # go vet is the official Go static analyzer
  - go vet ./...
  # forbid code with huge functions
  - gocyclo -ignore "_test.go" -avg -over 19 $GO_FILES
  # checks for unhandled errors
  - errcheck ./...
  # "go vet on steroids" + linter - ignore autogen code
  - megacheck -simple.exit-non-zero=true ./...
  # check for unnecessary conversions - ignore autogen code
  - unconvert ./...
  # one last linter - ignore autogen code
  - golint -set_exit_status $(go list ./... | grep -v /vendor/ )
